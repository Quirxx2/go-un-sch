// Code generated by mockery v2.15.0. DO NOT EDIT.

package golangunitedschoolcerts

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockStorage) Add(_a0 string, _a1 time.Time, _a2 *[]byte) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time, *[]byte) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockStorage_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - _a0 string
//   - _a1 time.Time
//   - _a2 *[]byte
func (_e *MockStorage_Expecter) Add(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockStorage_Add_Call {
	return &MockStorage_Add_Call{Call: _e.mock.On("Add", _a0, _a1, _a2)}
}

func (_c *MockStorage_Add_Call) Run(run func(_a0 string, _a1 time.Time, _a2 *[]byte)) *MockStorage_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time), args[2].(*[]byte))
	})
	return _c
}

func (_c *MockStorage_Add_Call) Return(_a0 error) *MockStorage_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Contains provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) Contains(_a0 string, _a1 time.Time) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, time.Time) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStorage_Contains_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contains'
type MockStorage_Contains_Call struct {
	*mock.Call
}

// Contains is a helper method to define mock.On call
//   - _a0 string
//   - _a1 time.Time
func (_e *MockStorage_Expecter) Contains(_a0 interface{}, _a1 interface{}) *MockStorage_Contains_Call {
	return &MockStorage_Contains_Call{Call: _e.mock.On("Contains", _a0, _a1)}
}

func (_c *MockStorage_Contains_Call) Run(run func(_a0 string, _a1 time.Time)) *MockStorage_Contains_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Contains_Call) Return(_a0 bool) *MockStorage_Contains_Call {
	_c.Call.Return(_a0)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) Delete(_a0 string, _a1 time.Time) {
	_m.Called(_a0, _a1)
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 string
//   - _a1 time.Time
func (_e *MockStorage_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockStorage_Delete_Call) Run(run func(_a0 string, _a1 time.Time)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return() *MockStorage_Delete_Call {
	_c.Call.Return()
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *MockStorage) Get(_a0 string, _a1 time.Time) (*[]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *[]byte
	if rf, ok := ret.Get(0).(func(string, time.Time) *[]byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
//   - _a1 time.Time
func (_e *MockStorage_Expecter) Get(_a0 interface{}, _a1 interface{}) *MockStorage_Get_Call {
	return &MockStorage_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *MockStorage_Get_Call) Run(run func(_a0 string, _a1 time.Time)) *MockStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(time.Time))
	})
	return _c
}

func (_c *MockStorage_Get_Call) Return(_a0 *[]byte, _a1 error) *MockStorage_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Load provides a mock function with given fields:
func (_m *MockStorage) Load() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStorage_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockStorage_Expecter) Load() *MockStorage_Load_Call {
	return &MockStorage_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockStorage_Load_Call) Run(run func()) *MockStorage_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorage_Load_Call) Return(_a0 error) *MockStorage_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockStorage(t mockConstructorTestingTNewMockStorage) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
