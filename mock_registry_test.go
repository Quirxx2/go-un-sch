// Code generated by mockery v2.15.0. DO NOT EDIT.

package golangunitedschoolcerts

import mock "github.com/stretchr/testify/mock"

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// AddCertificate provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockRegistry) AddCertificate(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string) (*Certificate, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 *Certificate
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) *Certificate); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_AddCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCertificate'
type MockRegistry_AddCertificate_Call struct {
	*mock.Call
}

// AddCertificate is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
//   - _a2 string
//   - _a3 string
//   - _a4 string
func (_e *MockRegistry_Expecter) AddCertificate(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}, _a4 interface{}) *MockRegistry_AddCertificate_Call {
	return &MockRegistry_AddCertificate_Call{Call: _e.mock.On("AddCertificate", _a0, _a1, _a2, _a3, _a4)}
}

func (_c *MockRegistry_AddCertificate_Call) Run(run func(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string)) *MockRegistry_AddCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockRegistry_AddCertificate_Call) Return(_a0 *Certificate, _a1 error) *MockRegistry_AddCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// AddTemplate provides a mock function with given fields: _a0, _a1
func (_m *MockRegistry) AddTemplate(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_AddTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTemplate'
type MockRegistry_AddTemplate_Call struct {
	*mock.Call
}

// AddTemplate is a helper method to define mock.On call
//   - _a0 string
//   - _a1 string
func (_e *MockRegistry_Expecter) AddTemplate(_a0 interface{}, _a1 interface{}) *MockRegistry_AddTemplate_Call {
	return &MockRegistry_AddTemplate_Call{Call: _e.mock.On("AddTemplate", _a0, _a1)}
}

func (_c *MockRegistry_AddTemplate_Call) Run(run func(_a0 string, _a1 string)) *MockRegistry_AddTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRegistry_AddTemplate_Call) Return(_a0 error) *MockRegistry_AddTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

// CertificatesByTemplatePK provides a mock function with given fields: _a0
func (_m *MockRegistry) CertificatesByTemplatePK(_a0 int) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(int) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_CertificatesByTemplatePK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CertificatesByTemplatePK'
type MockRegistry_CertificatesByTemplatePK_Call struct {
	*mock.Call
}

// CertificatesByTemplatePK is a helper method to define mock.On call
//   - _a0 int
func (_e *MockRegistry_Expecter) CertificatesByTemplatePK(_a0 interface{}) *MockRegistry_CertificatesByTemplatePK_Call {
	return &MockRegistry_CertificatesByTemplatePK_Call{Call: _e.mock.On("CertificatesByTemplatePK", _a0)}
}

func (_c *MockRegistry_CertificatesByTemplatePK_Call) Run(run func(_a0 int)) *MockRegistry_CertificatesByTemplatePK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRegistry_CertificatesByTemplatePK_Call) Return(_a0 []string, _a1 error) *MockRegistry_CertificatesByTemplatePK_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteCertificate provides a mock function with given fields: _a0
func (_m *MockRegistry) DeleteCertificate(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_DeleteCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCertificate'
type MockRegistry_DeleteCertificate_Call struct {
	*mock.Call
}

// DeleteCertificate is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) DeleteCertificate(_a0 interface{}) *MockRegistry_DeleteCertificate_Call {
	return &MockRegistry_DeleteCertificate_Call{Call: _e.mock.On("DeleteCertificate", _a0)}
}

func (_c *MockRegistry_DeleteCertificate_Call) Run(run func(_a0 string)) *MockRegistry_DeleteCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_DeleteCertificate_Call) Return(_a0 error) *MockRegistry_DeleteCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteTemplate provides a mock function with given fields: _a0
func (_m *MockRegistry) DeleteTemplate(_a0 int) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_DeleteTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTemplate'
type MockRegistry_DeleteTemplate_Call struct {
	*mock.Call
}

// DeleteTemplate is a helper method to define mock.On call
//   - _a0 int
func (_e *MockRegistry_Expecter) DeleteTemplate(_a0 interface{}) *MockRegistry_DeleteTemplate_Call {
	return &MockRegistry_DeleteTemplate_Call{Call: _e.mock.On("DeleteTemplate", _a0)}
}

func (_c *MockRegistry_DeleteTemplate_Call) Run(run func(_a0 int)) *MockRegistry_DeleteTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRegistry_DeleteTemplate_Call) Return(_a0 error) *MockRegistry_DeleteTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetCertificate provides a mock function with given fields: _a0
func (_m *MockRegistry) GetCertificate(_a0 string) (*Certificate, error) {
	ret := _m.Called(_a0)

	var r0 *Certificate
	if rf, ok := ret.Get(0).(func(string) *Certificate); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_GetCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCertificate'
type MockRegistry_GetCertificate_Call struct {
	*mock.Call
}

// GetCertificate is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) GetCertificate(_a0 interface{}) *MockRegistry_GetCertificate_Call {
	return &MockRegistry_GetCertificate_Call{Call: _e.mock.On("GetCertificate", _a0)}
}

func (_c *MockRegistry_GetCertificate_Call) Run(run func(_a0 string)) *MockRegistry_GetCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_GetCertificate_Call) Return(_a0 *Certificate, _a1 error) *MockRegistry_GetCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTemplateContent provides a mock function with given fields: _a0
func (_m *MockRegistry) GetTemplateContent(_a0 int) (*string, error) {
	ret := _m.Called(_a0)

	var r0 *string
	if rf, ok := ret.Get(0).(func(int) *string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_GetTemplateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplateContent'
type MockRegistry_GetTemplateContent_Call struct {
	*mock.Call
}

// GetTemplateContent is a helper method to define mock.On call
//   - _a0 int
func (_e *MockRegistry_Expecter) GetTemplateContent(_a0 interface{}) *MockRegistry_GetTemplateContent_Call {
	return &MockRegistry_GetTemplateContent_Call{Call: _e.mock.On("GetTemplateContent", _a0)}
}

func (_c *MockRegistry_GetTemplateContent_Call) Run(run func(_a0 int)) *MockRegistry_GetTemplateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockRegistry_GetTemplateContent_Call) Return(_a0 *string, _a1 error) *MockRegistry_GetTemplateContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTemplatePK provides a mock function with given fields: _a0
func (_m *MockRegistry) GetTemplatePK(_a0 string) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_GetTemplatePK_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTemplatePK'
type MockRegistry_GetTemplatePK_Call struct {
	*mock.Call
}

// GetTemplatePK is a helper method to define mock.On call
//   - _a0 string
func (_e *MockRegistry_Expecter) GetTemplatePK(_a0 interface{}) *MockRegistry_GetTemplatePK_Call {
	return &MockRegistry_GetTemplatePK_Call{Call: _e.mock.On("GetTemplatePK", _a0)}
}

func (_c *MockRegistry_GetTemplatePK_Call) Run(run func(_a0 string)) *MockRegistry_GetTemplatePK_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRegistry_GetTemplatePK_Call) Return(_a0 int, _a1 error) *MockRegistry_GetTemplatePK_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListTemplates provides a mock function with given fields:
func (_m *MockRegistry) ListTemplates() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRegistry_ListTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTemplates'
type MockRegistry_ListTemplates_Call struct {
	*mock.Call
}

// ListTemplates is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) ListTemplates() *MockRegistry_ListTemplates_Call {
	return &MockRegistry_ListTemplates_Call{Call: _e.mock.On("ListTemplates")}
}

func (_c *MockRegistry_ListTemplates_Call) Run(run func()) *MockRegistry_ListTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_ListTemplates_Call) Return(_a0 []string, _a1 error) *MockRegistry_ListTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateCertificate provides a mock function with given fields: _a0, _a1
func (_m *MockRegistry) UpdateCertificate(_a0 string, _a1 map[string]string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_UpdateCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCertificate'
type MockRegistry_UpdateCertificate_Call struct {
	*mock.Call
}

// UpdateCertificate is a helper method to define mock.On call
//   - _a0 string
//   - _a1 map[string]string
func (_e *MockRegistry_Expecter) UpdateCertificate(_a0 interface{}, _a1 interface{}) *MockRegistry_UpdateCertificate_Call {
	return &MockRegistry_UpdateCertificate_Call{Call: _e.mock.On("UpdateCertificate", _a0, _a1)}
}

func (_c *MockRegistry_UpdateCertificate_Call) Run(run func(_a0 string, _a1 map[string]string)) *MockRegistry_UpdateCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockRegistry_UpdateCertificate_Call) Return(_a0 error) *MockRegistry_UpdateCertificate_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateTemplate provides a mock function with given fields: _a0, _a1
func (_m *MockRegistry) UpdateTemplate(_a0 int, _a1 map[string]string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, map[string]string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_UpdateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTemplate'
type MockRegistry_UpdateTemplate_Call struct {
	*mock.Call
}

// UpdateTemplate is a helper method to define mock.On call
//   - _a0 int
//   - _a1 map[string]string
func (_e *MockRegistry_Expecter) UpdateTemplate(_a0 interface{}, _a1 interface{}) *MockRegistry_UpdateTemplate_Call {
	return &MockRegistry_UpdateTemplate_Call{Call: _e.mock.On("UpdateTemplate", _a0, _a1)}
}

func (_c *MockRegistry_UpdateTemplate_Call) Run(run func(_a0 int, _a1 map[string]string)) *MockRegistry_UpdateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(map[string]string))
	})
	return _c
}

func (_c *MockRegistry_UpdateTemplate_Call) Return(_a0 error) *MockRegistry_UpdateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMockRegistry interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRegistry(t mockConstructorTestingTNewMockRegistry) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
